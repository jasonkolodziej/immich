#
# WARNING: Make sure to use the docker-compose.yml of the current release:
#
# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
#
# The compose file on main may not be compatible with the latest release.
#

name: immich-secure

services:
  immich-server:
    container_name: immich_server
    image: immich-server:latest
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    env_file:
      - .env
    ports:
      - 2283:2283
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false
    build:
      context: ../
      dockerfile: server/Dockerfile
    volumes:
      - ${UPLOAD_LOCATION}/photos:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
        #? SSL
      - ${IMMICH_CERTS_LOCATION}:/usr/src/app/certs
    networks:
      immich_backend:
        aliases:
          - immich.docker
      immich_frontend:
        aliases:
          - immich.docker

  immich-machine-learning:
    container_name: immich_machine_learning
    image: immich-machine-learning:latest
    # extends:
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false
    build:
      context: ../machine-learning
      dockerfile: Dockerfile
      args:
        - DEVICE=cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference
    #? ssl
    expose:
      - 3003
    networks:
      immich_frontend:
        aliases:
          - immich_machine_learning
          - immich_ml
      immich_backend:
        aliases:
          - immich_machine_learning
          - immich_ml
    volumes:
      - model-cache:/cache

  redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:2ba50e1ac3a0ea17b736ce9db2b0a9f6f8b85d4c27d5f5accc6a416d8f42c6d5
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always
    env_file:
      - .env
    #? For SSL
    command: |
      sh -c docker-entrypoint.sh  \
      --tls-cert-file /data/server/${REDIS_TLS_CERT_FILENAME} \
      --tls-key-file /data/server/${REDIS_TLS_KEY_FILENAME} \
      --tls-ca-cert-file /data/${REDIS_TLS_CA_FILENAME} \
      --tls-auth-clients ${REDIS_TLS_ENABLED}
    expose:
      - 6379
    networks:
      immich_backend:
        aliases: #? must contain `$REDIS_HOSTNAME`, default is `redis`
          - redis
    volumes:
      # Do not edit the next line. If you want to change the redis storage location on your system, edit the value of REDIS_CERTS_LOCATION in the .env file
      - ${REDIS_CERTS_LOCATION}:/data
    environment:
      REDIS_CERTS_LOCATION: ${REDIS_CERTS_LOCATION:-"$IMMICH_CERTS_LOCATION/redis"}
      REDIS_TLS_CERT_FILE: ${REDIS_CERTS_LOCATION}/server/${REDIS_TLS_CERT_FILENAME}
      REDIS_TLS_KEY_FILE: ${REDIS_CERTS_LOCATION}/server/${REDIS_TLS_KEY_FILENAME}
      REDIS_TLS_CA_FILE: ${REDIS_CERTS_LOCATION}/${REDIS_TLS_CA_FILENAME}
      REDIS_TLS_ENABLED: yes # ${REDIS_TLS_ENABLED:-yes}
      REDIS_TLS_PORT: '${REDIS_PORT:-6379}'

  database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    env_file:
      - .env
    restart: always
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      #? SSL
      DB_CERTS_LOCATION: ${DB_CERTS_LOCATION:-"$IMMICH_CERTS_LOCATION/postgres"}
      DB_TLS_CERT_FILE: $DB_CERTS_LOCATION/server/${DB_TLS_CERT_FILENAME}
      DB_TLS_KEY_FILE: $DB_CERTS_LOCATION/server/${DB_TLS_KEY_FILENAME}
      DB_TLS_CA_FILE: $DB_CERTS_LOCATION/${DB_TLS_CA_FILENAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${DB_CERTS_LOCATION}:/var/lib/postgresql
      # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data

    expose:
      - 5432
    networks:
      immich_backend:
        aliases: #? must contain `$DB_HOSTNAME`, default is `database`
          - database
    command: |
      chown postgres /var/lib/postgresql/${DB_TLS_CA_FILENAME} && chmod 640 /var/lib/postgresql/${DB_TLS_CA_FILENAME} && \
      chown postgres /var/lib/postgresql/server/${DB_TLS_CERT_FILENAME} && chmod 640 /var/lib/postgresql/server/${DB_TLS_CERT_FILENAME} && \
      chown postgres /var/lib/postgresql/server/${DB_TLS_KEY_FILENAME} && chmod 640 /var/lib/postgresql/server/${DB_TLS_KEY_FILENAME} && \
      sh -c docker-entrypoint.sh \
      -c shared_preload_libraries=vectors.so
      -c 'search_path="$$user", public, vectors'
      -c logging_collector=on
      -c max_wal_size=2GB
      -c shared_buffers=512MB
      -c wal_compression=on
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server/${DB_TLS_CERT_FILENAME}
      -c ssl_key_file=/var/lib/postgresql/server/${DB_TLS_KEY_FILENAME}
      -c ssl_ca_file=/var/lib/postgresql/${DB_TLS_CA_FILENAME}
    # command:
    #   [
    #     'postgres',
    #     '-c',
    #     'shared_preload_libraries=vectors.so',
    #     '-c',
    #     'search_path="$$user", public, vectors',
    #     '-c',
    #     'logging_collector=on',
    #     '-c',
    #     'max_wal_size=2GB',
    #     '-c',
    #     'shared_buffers=512MB',
    #     '-c',
    #     'wal_compression=on',
    #     #? SSL
    #     '-c',
    #     'ssl=on',
    #     '-c',
    #     'ssl_cert_file=/var/lib/postgresql/${DB_TLS_CERT_FILE}',
    #     '-c',
    #     'ssl_key_file=$/var/lib/postgresql/{DB_TLS_KEY_FILE}',
    #     '-c',
    #     'ssl_ca_file=/var/lib/postgresql/${DB_TLS_CA_FILE}',
    #   ]

volumes:
  model-cache:

networks:
  immich_frontend:
    # external: true
    # name: cloudflare-tunnel
  immich_backend:
    driver: bridge
    internal: true
