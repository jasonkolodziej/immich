#
# WARNING: Make sure to use the docker-compose.yml of the current release:
#
# https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
#
# The compose file on main may not be compatible with the latest release.
#

name: immich

services:
  immich-server:
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    volumes:
      # Do not edit the next line. If you want to change the media storage location on your system, edit the value of UPLOAD_LOCATION in the .env file
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    ports:
      - '2283:2283'
    depends_on:
      - redis
      - database
    restart: always
    healthcheck:
      disable: false

  immich-machine-learning:
    container_name: immich_machine_learning
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - model-cache:/cache
    env_file:
      - .env
    restart: always
    healthcheck:
      disable: false

  redis:
    container_name: immich_redis
    image: docker.io/redis:6.2-alpine@sha256:2ba50e1ac3a0ea17b736ce9db2b0a9f6f8b85d4c27d5f5accc6a416d8f42c6d5
    #? For SSL
    command: sh -c docker-entrypoint.sh --tls-cert-file /data/${REDIS_TLS_CERT_FILE} --tls-key-file /data/${REDIS_TLS_KEY_FILE} --tls-ca-cert-file /data/${REDIS_TLS_CA_FILE} --tls-auth-clients ${REDIS_TLS_ENABLED}
    volumes:
      # Do not edit the next line. If you want to change the redis storage location on your system, edit the value of REDIS_CERTS_LOCATION in the .env file
      - ${REDIS_CERTS_LOCATION}:/data
    environment:
      REDIS_CERTS_LOCATION: ${REDIS_CERTS_LOCATION:-./redis}
      REDIS_TLS_CERT_FILE: ${REDIS_TLS_CERT_FILE:-"${REDIS_CERTS_LOCATION}/server/redis.crt"}
      REDIS_TLS_KEY_FILE: ${REDIS_TLS_KEY_FILE:-"${REDIS_CERTS_LOCATION}/server/redis.key"}
      REDIS_TLS_CA_FILE: ${REDIS_TLS_CA_FILE:-"${REDIS_CERTS_LOCATION}/ca.crt"}
      REDIS_TLS_ENABLED: yes
      REDIS_TLS_PORT: '${REDIS_PORT:-6379}'
    healthcheck:
      test: redis-cli ping || exit 1
    restart: always

  database:
    container_name: immich_postgres
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      #? SSL
      DB_CERTS_LOCATION: ${DB_CERTS_LOCATION:-./postgres}
      DB_TLS_CERT_FILE: ${DB_TLS_CERT_FILE:-"${DB_CERTS_LOCATION}/server/postgres.crt"}
      DB_TLS_KEY_FILE: ${DB_TLS_KEY_FILE:-"${DB_CERTS_LOCATION}/server/postgres.key"}
      DB_TLS_CA_FILE: ${DB_TLS_CA_FILE:-"${DB_CERTS_LOCATION}/ca.crt"}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    volumes:
      - ${DB_CERTS_LOCATION}:/var/lib/postgresql
      # Do not edit the next line. If you want to change the database storage location on your system, edit the value of DB_DATA_LOCATION in the .env file
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command:
      # [
      #   'postgres',
      #   '-c',
      #   'shared_preload_libraries=vectors.so',
      #   '-c',
      #   'search_path="$$user", public, vectors',
      #   '-c',
      #   'logging_collector=on',
      #   '-c',
      #   'max_wal_size=2GB',
      #   '-c',
      #   'shared_buffers=512MB',
      #   '-c',
      #   'wal_compression=on',
      # ]
      [
        'postgres',
        '-c',
        'shared_preload_libraries=vectors.so',
        '-c',
        'search_path="$$user", public, vectors',
        '-c',
        'logging_collector=on',
        '-c',
        'max_wal_size=2GB',
        '-c',
        'shared_buffers=512MB',
        '-c',
        'wal_compression=on',
        #? SSL
        '-c',
        'ssl=on',
        '-c',
        'ssl_cert_file=/var/lib/postgresql/${DB_TLS_CERT_FILE}',
        '-c',
        'ssl_key_file=$/var/lib/postgresql/{DB_TLS_KEY_FILE}',
        '-c',
        'ssl_ca_file=/var/lib/postgresql/${DB_TLS_CA_FILE}',
      ]
    restart: always

volumes:
  model-cache:
