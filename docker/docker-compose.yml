#
# WARNING: Make sure to use the docker-compose.yml of the current release:
#
#? https://github.com/immich-app/immich/releases/latest/download/docker-compose.yml
#
# The compose file on main may not be compatible with the latest release.
# sy2iMfYobiGeBYVdj8hG1qJVDjCbWSyD0excSeCdQ

#* ## Docker Compose
x-immich-common: &immich-common
  environment: &env-common #? The location where your uploaded files are stored
    UPLOAD_LOCATION: '${UPLOAD_LOCATION:-./library}'
    #? Host Path for Postgres database
    DB_DATA_LOCATION: '${DB_DATA_LOCATION:-./postgres}'
    DB_BACKUPS_LOCATION: '${DB_BACKUPS_LOCATION:-./db_dumps}'

#* Settings and configurations that are common
#* for immich-server and immich-machine-learning
#* containers declaring the environment variables for
#* General and Worker Configuration
x-immich-general:
  &immich-general # image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}

  environment: &env-general
    <<: *env-common
  #* ## General Configuration
  #? Timezone for the server
  #? https://en.wikipedia.org/wiki/List_of_tz_database_time_zones#List
  #* TZ: "America/New_York"
  # TZ: "${TZ:-'Etc/UTC'}"
  IMMICH_ENV: '${IMMICH_ENV:-production}' #? Environment (production, development)
  IMMICH_LOG_LEVEL: '${IMMICH_LOG_LEVEL:-log}' #? Log Level (verbose, debug, log, warn, error)
  #? Media Location inside the container
  #! You probably shouldn't set this
  #! This path is where the Immich code looks for the files,
  #! which is internal to the docker container.
  #! Setting it to a path on your host will certainly break things,
  #! you should use the `UPLOAD_LOCATION` variable instead.
  IMMICH_MEDIA_LOCATION: '${IMMICH_MEDIA_LOCATION:-./upload}'
  #? IMMICH_CONFIG_FILE	Path to config file for server
  #? See https://immich.app/docs/install/configuration-file
  IMMICH_CONFIG_FILE: '${IMMICH_CONFIG_FILE:-}'

  NO_COLOR: '${NO_COLOR:-false}' #? Set to true to disable color-coded log output
  #? Amount of cores available to the immich server
  #* Default: auto-detected cpu core count
  CPU_CORES: '${CPU_CORES:-$(nproc)}'
  IMMICH_API_METRICS_PORT: '${IMMICH_API_METRICS_PORT:-8081}' #? Port for the OTEL metrics
  IMMICH_MICROSERVICES_METRICS_PORT: '${IMMICH_MICROSERVICES_METRICS_PORT:-8082}' #? Port for the OTEL metrics
  IMMICH_PROCESS_INVALID_IMAGES: '${IMMICH_PROCESS_INVALID_IMAGES:-true}' #? IMMICH_PROCESS_INVALID_IMAGES	When true, generate thumbnails for invalid images
  IMMICH_TRUSTED_PROXIES: '${IMMICH_TRUSTED_PROXIES:-}' #? List of comma separated IPs set as trusted proxies
  IMMICH_IGNORE_MOUNT_CHECK_ERRORS: '${IMMICH_IGNORE_MOUNT_CHECK_ERRORS:-false}' #? Please review https://immich.app/docs/administration/system-integrity

#* ## Database Configuration
#*    All `DB_` variables must be provided to all Immich workers, including api and microservices.
#*    `DB_URL` must be in the format `postgresql://immichdbusername:immichdbpassword@postgreshost:postgresport/immichdatabasename`.
#*    You can require SSL by adding `?sslmode=require` to the end of the `DB_URL` string,
#*    or require SSL and skip certificate verification by adding `?sslmode=require&sslmode=no-verify`.
#! When `DB_URL` is defined, the `DB_HOSTNAME`, `DB_PORT`, `DB_USERNAME`, `DB_PASSWORD` and `DB_DATABASE_NAME` database variables are ignored.
x-immich-postgres-db:
  &common-postgresdb #* image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
  image: &common-postgresdb-image tensorchord/pgvecto-rs:pg14-v0.2.0
  command: &common-postgresdb-command |
    postgres \
    -c shared_preload_libraries=vectors.so \
    -c 'search_path="$$user", public, vectors' \
    -c logging_collector=on \
    -c max_wal_size=2GB \
    -c shared_buffers=512MB \
    -c wal_compression=on
  environment: &common-postgresdb-env
    DB_USERNAME: '${DB_USERNAME:-postgres}' #? Database Username
    DB_PASSWORD: '${DB_PASSWORD:-postgres}' #? Database Password
    DB_HOSTNAME: '${DB_HOSTNAME:-database}' #? Database Hostname
    DB_PORT: 5432 #? DB Port
    DB_DATABASE_NAME: '${DB_DATABASE_NAME:-immich}' #? Database Name
    # DB_URL: "${DB_URL:-postgresql://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOSTNAME}:${DB_PORT}/${DB_DATABASE_NAME}?sslmode=require}" #? Database URL
    #? DB Vector Extension
    #! One of [pgvecto.rs, pgvector]
    #! This setting cannot be changed after the server has successfully started up.
    DB_VECTOR_EXTENSION: '${DB_VECTOR_EXTENSION:-pgvecto.rs}'
    #* DB_VECTOR_EXTENSION: "${DB_VECTOR_EXTENSION:-pgvector}"
    #? DB Skip Migration
    #?  Whether to skip running migrations on startup (one of [true, false])
    DB_SKIP_MIGRATION: '${DB_SKIP_MIGRATION:-false}'
    POSTGRES_INITDB_ARGS: "${POSTGRES_INITDB_ARGS:-'--data-checksums'}"
  secrets: &common-postgresdb-secrets
    - postgres-password
    - db-password
  restart: &common-postgresdb-restart always
  healthcheck: &common-postgresdb-healthcheck
    test: |
      pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; \
      Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; \
      echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
    interval: 5m
    # start_interval: 30s
    start_period: 5m

  #! Do not edit the next line.
  #? If you want to change the database storage location on your system, edit the value of `DB_DATA_LOCATION` in the .env file
  volumes: &common-postgresdb-volumes |-
    ${DB_DATA_LOCATION}:/var/lib/postgresql/data

  expose: &common-postgresdb-expose
    - 5432
  ports: &common-postgresdb-ports
    - 5432:5432

x-postgresdb-pw: &x-postgresdb_pw
  command: &postgresdb_pw-command
  <: *common-postgresdb-command

  environment: &postgresdb_pw-env
    <<: *common-postgresdb-env
    #* Passed as
    POSTGRES_USER: '${DB_USERNAME}' #? Database Username - Required for `backup` and `database` services
    POSTGRES_PASSWORD: '${DB_PASSWORD}' #? Database Password - Required for `backup` and `database` services
    POSTGRES_DB: '${DB_DATABASE_NAME}' #? Database Name - Required for `backup` and `database` services
    POSTGRES_HOST: '${DB_HOSTNAME}' #? Database Hostname - Required for `backup` and `database` services

#* ## Redis Configuration
#*    All `REDIS_` variables must be provided to all Immich workers, including api and microservices.
#*    `REDIS_URL` must start with `ioredis://` and then include a base64 encoded JSON string for the configuration. More info can be found in the upstream ioredis documentation.
#*    When `REDIS_URL` or `REDIS_SOCKET` are defined, the `REDIS_HOSTNAME`, `REDIS_PORT`, `REDIS_USERNAME`, `REDIS_PASSWORD`, and `REDIS_DBINDEX` variables are ignored.
x-immich-redis: &common-redis
  #? original redis image
  # image: docker.io/redis:6.2-alpine@sha256:2d1463258f2764328496376f5d965f20c6a67f66ea2b06dc42af351f75248792
  image: &common-redis-image redis:alpine
  restart: &common-redis-restart always
  environment: &common-redis-env
    REDIS_URL: '${REDIS_URL:-}' #? Redis URL
    REDIS_USERNAME: '${REDIS_USERNAME:-}' #? Redis Username
    REDIS_PASSWORD: '${REDIS_PASSWORD:-}' #? Redis Password
    REDIS_HOSTNAME: '${REDIS_HOSTNAME:-redis}' #? Redis Hostname
    REDIS_SOCKET: '${REDIS_SOCKET:-}' #? Redis Socket
    REDIS_PORT: '${REDIS_PORT:-6379}' #? Redis Port
    REDIS_DBINDEX: '${REDIS_DBINDEX:-0}' #? Redis Database
  expose: &common-redis-expose
    - 6379
  ports: &common-redis-ports
    - 6379:6379
  healthcheck: &common-redis-healthcheck
    test: redis-cli ping || exit 1
#* ## Redis Configuration with Password
#*   Main container configuration for Redis with password authentication used for `immich-server` and `immich-machine-learning` services
x-redis-pw: &x-redis_pw
  <<: *common-redis
  #? Using a password with Redis
  #*   command: sh -c docker-entrypoint.sh --requirepass $(cat $REDIS_PASSWORD_FILE)
  command: &redis_pw-command |
    sh -c "[ "$$REDIS_PASSWORD_FILE" ] && ( cat "$$REDIS_PASSWORD_FILE" | xargs -0 redis-server --requirepass ) || redis-server"
  environment: &redis_pw-env
    <<: *common-redis-env
    REDIS_PASSWORD_FILE: /run/secrets/redis-password #? Redis Password File - Required for `redis` service to set password
  secrets: &redis_pw-secrets
    - redis-password

#? End of all service configurations

services:
  immich-server:
    # env_file: .env
    container_name: immich_server
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    depends_on:
      - redis
      - database
    restart: always
    # extends:
    #   file: hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    labels:
      # - "com.centurylinklabs.watchtower.enable=false"
      - 'com.centurylinklabs.watchtower.monitor-only=true'
    #? https://immich.app/docs/install/environment-variables#general
    environment:
      <<: [*env-common, *common-postgresdb-env, *common-redis-env]

    volumes:
      #! Do not edit the next line.
      #? If you want to change the media storage location on your system, edit the value of `UPLOAD_LOCATION` in the .env file
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    secrets:
      - postgres-password
      - db-password
      - redis-password

    networks:
      immich_backend:
        aliases:
          - immich.docker
      immich_frontend:
        aliases:
          - immich.docker
    ports:
      #? The port the server will be accessible on `IMMICH_PORT`
      # - 3001:3001
      - '2283:2283'

    healthcheck:
      disable: false

  immich-machine-learning:
    # env_file: .env
    container_name: immich_machine_learning
    #? For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    #* Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: #? uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #*   file: hwaccel.ml.yml
    #*   service: cpu #? set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - model-cache:/cache
    labels:
      # - "com.centurylinklabs.watchtower.enable=false"
      - 'com.centurylinklabs.watchtower.monitor-only=true'
    restart: always
    expose:
      - 3003
    networks:
      immich_frontend:
        aliases:
          - immich_machine_learning
          - immich_ml
      immich_backend:
        aliases:
          - immich_machine_learning
          - immich_ml

    healthcheck:
      disable: false

  redis:
    container_name: immich_redis
    # image: docker.io/redis:6.2-alpine@sha256:2d1463258f2764328496376f5d965f20c6a67f66ea2b06dc42af351f75248792
    image: redis:alpine
    command: *redis_pw-command
    restart: *common-redis-restart
    environment:
      <<: *redis_pw-env
    secrets: *redis_pw-secrets
    expose: *common-redis-expose

    networks:
      immich_backend:
        aliases:
          - redis

    healthcheck: *common-redis-healthcheck

  database:
    container_name: immich_postgres
    # image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    image: tensorchord/pgvecto-rs:pg16-v0.2.0
    environment:
      <<: *postgresdb_pw-env

    volumes:
      - *common-postgresdb-volumes
      # #! Do not edit the next line.
      # #? If you want to change the database storage location on your system, edit the value of `DB_DATA_LOCATION` in the .env file
      # - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    expose: *common-postgresdb-expose
    command: *postgresdb_pw-command
    restart: *common-postgresdb-restart
    healthcheck: *common-postgresdb-healthcheck
    networks:
      immich_backend:
        aliases:
          - immich_database

    # command:
    #   [
    #     'postgres',
    #     '-c',
    #     'shared_preload_libraries=vectors.so',
    #     '-c',
    #     'search_path="$$user", public, vectors',
    #     '-c',
    #     'logging_collector=on',
    #     '-c',
    #     'max_wal_size=2GB',
    #     '-c',
    #     'shared_buffers=512MB',
    #     '-c',
    #     'wal_compression=on',
    #   ]

  # backup:
  #   # env_file: .env
  #   container_name: immich_db_dumper
  #   image: prodrigestivill/postgres-backup-local:16
  #   restart: always

  #   environment:
  #     <<: *env-db-backup
  #     # POSTGRES_HOST: database
  #     # POSTGRES_USER: ${DB_USERNAME}
  #     # POSTGRES_PASSWORD: ${DB_PASSWORD}
  #     # POSTGRES_DB: ${DB_DATABASE_NAME}
  #     POSTGRES_CLUSTER: "TRUE"
  #     SCHEDULE: "@daily"
  #     POSTGRES_EXTRA_OPTS: "--clean --if-exists"
  #     BACKUP_DIR: /db_dumps
  #   volumes:
  #     #! Do not edit the next line.
  #     #? If you want to change the database storage location on your system, edit the value of `DB_BACKUPS_LOCATION` in the .env file
  #     - ${DB_BACKUPS_LOCATION}:/db_dumps
  #   depends_on:
  #     - database
  #   networks:
  #     immich_backend:
  #       aliases:
  #         - immich_db_dumper

volumes:
  model-cache:

networks:
  immich_frontend:
    # external: true
    # name: cloudflare-tunnel
  immich_backend:
    driver: bridge
    internal: true

secrets:
  redis-password:
    environment: 'REDIS_PASSWORD'
  postgres-password:
    environment: 'DB_PASSWORD'
  db-password:
    environment: 'DB_PASSWORD'
  postgres-username:
    environment: 'DB_USERNAME'
